#IMPORTING VARIOUS LIBRARIES WHICH MIGHT BE USEFUL
library(readr)  #CSV file I/O
library(plyr)
library(dplyr)  #for fast data manipulation(functions like mutate,select,arrange,filter,...)
library(ggplot2)#for data visualisation
#READING THE DATASETs IN R
BMStrain <- read.csv('C:\\Users\\Ashish_Solanki\\Desktop\\FALL Semester\\Data Analytics with R\\Project/Train.csv')
#READING THE DATASETs IN R
BMStrain <- read.csv('C:\\Users\\Home\\Documents\\R Projects\\Big Mart\\Train.csv')
BMStest <- read.csv('C:\\Users\\Home\\Documents\\R Projects\\Big Mart\\Test.csv')
#A QUICK VIEW AT STRUCTURE AND SUMMARY OF BOTH DATASETS
str(BMStrain) #BMStrain is a dataframe with 8523 obs. of  12 variables.
str(BMStest)  #BMStest is a dataframe with 5681 obs. of  11 variables.
## We have 7 categorical variables, 4 numerical variables and 1 integer variable.
#Item_Outlet_Sales is the target variable and is missing in the test dataset.
#Looking at the summary for any MISSING VALUES in train and test dataset
summary(BMStrain)
summary(BMStest)
# Here we can see that Item_Weight has missing values in it,in both training and test.
# Also, Item_Fat_Content has improper duplicate factors having the same meaning.
# Item_Visibilty has minimum value as zero which is impossible.
# Outlet Size has empty records in both train and test dataset.
#DIMENSION OF DATASETS
dim(BMStrain)
dim(BMStest)
# Combining the training and test dataset so that we dont have to prepare data separately for both.
# Also, added target variable in test dataset so that both can be appended properly.
BMStest$Item_Outlet_Sales <-1
combi <- rbind(BMStrain,BMStest)
# Imputing the missing value of Item_Weight variable
# Impute missing value by median. I'm using median because it is known to be highly robust to outliers
combi$Item_Weight[is.na(combi$Item_Weight)] <- median(combi$Item_Weight, na.rm =TRUE)
table(is.na(combi$Item_Weight))
# Imputing the zero(0) value of Item_Visibility with median.
combi$Item_Visibility <- ifelse(combi$Item_Visibility ==0,median(combi$Item_Visibility),combi$Item_Visibility)
# Convert different variations of fat to consistent values - low fat and Regular
combi$Item_Fat_Content <- gsub("LF", "lowfat",combi$Item_Fat_Content)
combi$Item_Fat_Content <- gsub("low fat", "lowfat",combi$Item_Fat_Content)
combi$Item_Fat_Content <- gsub("Low Fat", "lowfat",combi$Item_Fat_Content)
combi$Item_Fat_Content <- gsub("reg", "Regular",combi$Item_Fat_Content)
combi$Item_Fat_Content <- as.factor(combi$Item_Fat_Content)
summary(combi$Item_Fat_Content)
# Imptuting the empty records of Outlet Size with Other
levels(combi$Outlet_Size)[1] <-"Other"
summary (combi$Outlet_Size)
# Looking at Summary to see the changes after data preparation
summary(combi)
#Dividing data back to Training and Validation for the model
new_train <-combi[1:nrow(BMStrain),]
new_test <- combi[-(1:nrow(BMStrain)),]
dim(new_train)
dim(new_test)
#linear regression modelling as Item_Output_Sales is a continous variable.
linear_model <- lm(Item_Outlet_Sales ~ ., data =new_train)
summary(linear_model)
rmse(new_train$Item_Outlet_Sales,linear_model$fitted.values)
# trying to improve the R square value by using log as to tackle heteroskedasticity is by taking the log of response variable.
linear_model2 <- lm(log(Item_Outlet_Sales) ~ ., data =new_train)
summary(linear_model2)
library(rpart)
library(e1071)
library(rpart.plot)
library(caret)
#setting the tree control parameters
fitControl <- trainControl(method = "cv", number =5)
cartGrid <- expand.grid(.cp=(1:50)*0.01)
main_tree <- rpart(Item_Outlet_Sales ~ ., data = new_train, control =rpart.control(cp=0.01))
prp(main_tree)
library(Metrics)
#DATA VISUALIZATION
library(ggplot2)
ggplot(new_train, aes(x= Item_Visibility, y = Item_Outlet_Sales)) + geom_point(size =
2.5, color="navy") + xlab("Item Visibility") + ylab("Item Outlet Sales") +
ggtitle("Item Visibility vs Item Outlet Sales")
library(ggplot2)
ggplot(new_train, aes(Outlet_Identifier, Item_Outlet_Sales)) + geom_bar(stat =
"identity", color = "purple") +theme(axis.text.x = element_text(angle = 70, vjust =
0.5, color = "black")) + ggtitle("Outlets vs Total Sales") + theme_bw()
library(ggplot2)
ggplot(new_train, aes(Item_Type, Item_Outlet_Sales)) + geom_bar( stat = "identity",color="navy") + theme(axis.text.x =element_text(angle = 70, vjust = 0.5, color = "navy")) +
xlab("Item Type") + ylab("Item Outlet Sales")+ggtitle("Item Type vs Sales")
library(ggplot2)
ggplot(new_train, aes(Outlet_Location_Type, Item_Outlet_Sales)) + geom_bar(stat =
"identity", color = "darkgreen") +theme(axis.text.x = element_text(angle = 70, vjust =
0.5, color = "black")) + ggtitle("Outlet Location vs Total Sales") + theme_bw()
library(ggplot2)
ggplot(new_train, aes(Outlet_Establishment_Year, Item_Outlet_Sales)) + geom_bar(stat =
"identity", color = "purple")  + ggtitle("Year vs Total Sales") + theme_bw()
